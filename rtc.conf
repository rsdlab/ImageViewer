#------------------------------------------------------------
# RT-Component manager configuration
#
# See details in the following reference manual or web page.
# https://openrtm.org/openrtm/en/content/configuration
# https://openrtm.org/openrtm/ja/content/rtcconf_reference_ja
#

#------------------------------------------------------------
# Typically used configuration parameters
#
# corba.name_servers: localhost, 192.168.0.1
# corba.endpoints: <interface addess>, <interface addess>
# logger.enable: YES
# logger.file_name: ./rtc%p.log
# logger.log_level: NORMAL
#
# The following properties should be specified in component specific
# configuration files.
# exec_cxt.periodic.type: PeriodicExecutionContext
# exec_cxt.periodic.rate: 1000

# Component specific configruation files:
# If you want to load component specific configuration file, please
# uncomment the following line.
#
# ImageProcessing.ImageViewer.config_file: ImageViewer.conf
# or
# ImageProcessing.ImageViewer0.config_file: ImageViewer0.conf
# ImageProcessing.ImageViewer1.config_file: ImageViewer1.conf
# ImageProcessing.ImageViewer2.config_file: ImageViewer2.conf
#
#------------------------------------------------------------

ImageProcessing.ImageViewer.config_file: ImageViewer.conf


#
# Please delete the following part if you are familiar with OpenRTM's
# configuration parameters.
#
##----------------------------------------------------------------------
##
## RT-Component manager configurations
##
##----------------------------------------------------------------------




##------------------------------------------------------------
## Configuration version (optional)
##
# config.version: 1.2

##------------------------------------------------------------
## OpenRTM-aist version (optional)
##
# openrtm.version: 1.2.0

##------------------------------------------------------------
## The name of manager (default = manager)
##
# manager.name: manager

##------------------------------------------------------------
## The instance name of manager (default = manager)
##
# manager.instance_name: manager

##
## Manager naming format
##
## The name format of manager that is bound to naming services.
## The delimiter between names is "/".
## The delimiter between name and kind is ".".
##
## This is formatted according to the following replacement rules.
##
## %n: The instance name of the manager.
## %h: The hostname.
## %M: The manager name.
## %p: PID of the manager.
##
# naming.formats: %h.host_cxt/%n.mgr


##------------------------------------------------------------
## Enable a function to set colors on terminal output
## 
# logger.escape_sequence_enable: NO



##------------------------------------------------------------
## Master manager
## - manager.is_master: YES/NO, This process made a master or not.
## - manager.corba_servant: YES/NO, create manager's corba service or not
## - corba.master_manager: <host_name>:<port>, master manager's location
# manager.is_master: YES
# manager.corba_servant: YES
# corba.master_manager: localhost:2810

##------------------------------------------------------------
## Manager auto shutdown options
## - manager.shutdown_on_nortcs: YES/NO,
##   process will be shutdown in case no rtc exists when rtc is deleted.
## - manager.shutdown_auto:
##   process will be shutdown in case no rtc exists on periodic check.
## - manager.auto_shutdown_duration:
##   manager duration time [s] until shutdown after no RTCs existing
# manager.shutdown_on_nortcs: YES
# manager.shutdown_auto: YES
# manager.auto_shutdown_duration: 10.0

##------------------------------------------------------------
## Manager termination wait time
## - manager.termination_waittime:
##   wait time length before manager termination thread started
# manager.termination_waittime: 0.5

##------------------------------------------------------------
## Manager process's CPU affinity setting
##
## This option make the process bound to specific CPU(s).  Options must
## be one or more comma separated numbers to identify CPU ID.  CPU ID
## is started from 0, and maximum number is number of CPU core -1.  If
## invalid CPU ID is specified, all the CPU will be used for the
## process.
##
## Example:
##   manager.cpu_affinity: 0, 1, 2, ...
##
# manager.cpu_affinity: 0


##------------------------------------------------------------
## Naming policy
##
## "process_unique", "node_unique" and "ns_unique" are supported.
##
# manager.components.naming_policy: process_unique

##------------------------------------------------------------
## Supported languages
##
# manager.supported_languages: C++, Python, Java


##------------------------------------------------------------
## Enable a module automatic search function
##
# manager.modules.search_auto: YES

##------------------------------------------------------------
## Module List to load before CORBA initialization
##
## Valid settings:
## manager.preload.modules: SSLTransport.dll
## manager.preload.modules: SSLTransport.py
## manager.preload.modules: SSLTransport
## manager.preload.modules: C:\\Python27\\Lib\\site-packages\\OpenRTM_aist\\ext\\SSLTransport
##
# manager.preload.modules:



##============================================================
## CORBA configuration
##============================================================
##
## CORBA ORB's arguments
##
## ORB specific command line options given to ORB_init().
## See your ORB documentation.
##
## Example:
##   corba.args: -ORBInitialHost myhost -ORBInitialPort 8888
##
##
# corba.args: -ORBgiopMaxMsgSize 4194304

##
## ORB endpoint
##
## If you have two or more network interfaces, ORB endpoint address and/or
## port have to be specified. If hostname or port number is abbreviated,
## default interface or port number is used. At least one colon ':'
## is needed when you specify this option.
##
## Examples:
##   corba.endpoint: myhost:      (use myhost and default port)
##   corba.endpoint: :9876        (use default addr and port 9876)
##   corba.endpoint: myhost:9876  (use myhost and port 9876)
##
# corba.endpoint: 

##
## Multiple endpoint options (experimental)
##
## Multiple endpoint addresses and ports can be specified using this option.
##
## Example:
##   corba.endpoints: 192.168.1.10:1111, 192.168.10.11:2222
##   corba.endpoints: 192.168.1.10, 192.168.10.11
##   corba.endpoints: all
##
# corba.endpoints:
# corba.endpoints_ipv4: [readonly]
# corba.endpoints_ipv6: [readonly]

##
## Specify what kind of IP addresses will be set to corba.endpoints
##
## Examples:
## corba.endpoint_property: ipv4
## corba.endpoint_property: ipv4, ipv6(0)
## corba.endpoint_property: ipv6
## corba.endpoint_property: ipv4(0,1), ipv6(2,3)
##
# corba.endpoint_property:

##
## CORBA name server setting
##
## Multiple name servers can be specified separating by comma.
## If port number is abbreviated, default port number is used.
## The default port number is depend on ORB implementation.
##
## Examples:
##   corba.nameservers: openrtm.aist.go.jp:9876
##   corba.nameservers: rtm0.aist.go.jp, rtm1.aist.go.jp, rtm2.aist.go.jp
##
# corba.nameservers: localhost

##
## IOR host address replacement by guessed endpoint from routing (experimental)
##
## This option replaces a host address with an endpoint that is guessed
## by route information to nameserver's address. This option may be
## effective for CORBA implementation that does not supports IOR's
## multiple profile or alternate IIOP address. However, since other
## object references that are obtained from RT-Components or other are
## not modified by this rule, other RTCs that are connected to this RTC
## have to also support IOR multiple profile feature.  When this option
## is used, corba.endpoints option should also be specified with
## multiple endpoints.
##
# corba.nameservice.replace_endpoint: NO

##
## IOR alternate IIOP addresses
##
## This option adds alternate IIOP addresses into the IOR Profiles.
## IOR can include additional endpoints for a servant. It is almost
## same as "corba.endpoints" option, but this option does not create
## actual endpoint on the ORB. (corba.endpoints try to create actual
## endpoint, and if it cannot be created, error will be returned.)
## This option just add alternate IIOP endpoint address information to
## an IOR.
##
## This option can be used when RTCs are located inside of NAT or
## router.  Generally speaking, RTCs in a private network cannot
## connect to RTCs in the global network, because global client cannot
## reach to private servants. However, if route (or NAT) is properly
## configured for port forwarding, global RTCs can reach to RTCs in
## private network.
##
## A setting example is as follows.
## 1) Configure your router properly for port-forwarding.
##    ex. global 2810 port is forwarded to private 2810
## 2) Set the following options in rtc.conf
##  corba.nameservers: my.global.nameserver.com <- name server in global network
##  corba.endpoints: :2810 <- actual port number
##  corba.additional_ior_addresses: w.x.y.z:2810 <- routers global IP addr/port
## 3) Launch global RTCs and private RTC, and connect them.
##
# corba.alternate_iiop_addresses: addr:port

##
## Auto update to Master Manager
##
# corba.update_master_manager.enable:YES

##
## Update interval [s] for auto update
##
# corba.update_master_manager.interval: 10.0

##------------------------------------------------------------
## SSL Transport settings
##
# corba.ssl.certificate_authority_file: root.crt
# corba.ssl.key_file: server.pem
# corba.ssl.key_file_password: password
# corba.args:-ORBclientTransportRule "* ssl, tcp"

##============================================================
## Naming configurations
##============================================================
##
## Enable/Disable naming functions
##
# naming.enable: YES

##
## Naming Types
##
## "corba" and "manager" are supported.
##
# naming.type: corba

##
## Naming format
##
## The name format of components that is bound to naming services.
## The delimiter between names is "/".
## The delimiter between name and kind is ".".
##
## example: (OpenRTM-aist-0.2.0 style)
##       %h.host_cxt/%M.mgr_cxt/%c.cat_cxt/%m.mod_cxt/%n.rtc
## This is formatted according to the following replacement rules.
##
## %n: The instance name of the component.
## %t: The type name of the component.
## %m: The module name of the component.
## %v: The version of the component.
## %V: The component vendor.
## %c: The category of the component.
## %h: The hostname.
## %M: The manager name.
## %p: PID of the manager.
##
# naming.formats: %h.host/%n.rtc

##
## Auto update to Naming Server
##
# naming.update.enable: YES
##
## Update interval [s] for auto update
##
# naming.update.interval: 10.0
##
## Rebind references in auto update
##
# naming.update.rebind: NO

## End of Naming configuration section
##------------------------------------------------------------

##============================================================
## Module management
##============================================================
##
## Loadable module search path list
##
## Manager searches loadable modules from the specified search path list.
## Path list elements should be separated by comma.
## Path delimiter is '/' on UNIX, and '\\' on Windows
## Valid path examples:
##   manager.modules.load_path: C:/Program Files/OpenRTM-aist,  \
##   			       C:\\Program Files\\OpenRTM-aist
##   manager.modules.load_path: /usr/lib, /usr/local/lib,       \
##   			       /usr/local/lib/OpenRTM-aist/libs
##
# manager.modules.load_path: ./

##
## Preload module list
##
## Manager can load loadable modules before starting up.
## Loadable modules, which is specified only as its file name, is searched
## in each module load path specified in the "manager.modules.load_path".
## If the "manager.modules.abs_path_allowed" option is YES, loadable file
## can be specified as full-path name.
##
## Module initialization function name is usually estimated module file
## name.  If the module file name is ConsoleIn.so, the initialization
## function name is set to "ConsleInInit." If you want to specify
## specify the initialization function name, the initialization
## function name in parenthesis after module file name can be
## specified, like as "Hoge.so (ConsoleInInit)".  File extensions such
## as ".so", ".dll", ".dylib" can be drop. If module file name without
## file extension is specified, an extension specified in property
## variable "manager.modules.C++.suffixes" is supplied.
##
## Valid settings:
## manager.modules.preload: ConsoleIn.dll, ConsoleOut.dll
## manager.modules.preload: ConsoleIn.so, ConsoleOut.so
## manager.modules.preload: Hoge.so (ConsoleInInit), ConsoleOut
## manager.modules.abs_path_allowed: YES
## manager.modules.preload: /usr/lib/OpenRTM-aist/ConsoleIn.so
##
# manager.modules.preload:

##
## Permission flag of absolute module path
##
## If this option is "YES", absolute path specification for module is allowed.
##
# manager.modules.abs_path_allowed: YES

##
## The following options are not implemented yet.
##
# manager.modules.config_ext:
# manager.modules.config_path:
# manager.modules.detect_loadable:
# manager.modules.init_func_suffix:
# manager.modules.init_func_prefix:
# manager.modules.download_allowed:
# manager.modules.download_dir:
# manager.modules.download_cleanup:
##

##
## Advance component creation
##
## This option specifies components' names (module name) creating in advance
## before starting the manager's event-loop. The components' factories should
## be registered by manager.module.preload option or statically linked to the
##  manager.
##
## Example:
## manager.components.precreate: ConsoleIn, ConsoleOut, SeqIn, SeqOut
##
# manager.components.precreate:

##
## Advance connection creation
##
## This option specifies connections to be created in advance before
## starting the manager's event-loop. The target components and ports
## must be created previously by manager.components.precreate optinos.
## A port is specified as XXX format, and a connection is specified by
## a delimiter XX between ports such as ConsoleIn.out:ConsoleOut.in. A
## connector profile is specified in the following parentheses "()" by
## "key=falue" format with "&" delimiter.
##
## Example:
## manager.components.preconnect: ConsoleIn.out?port=ConsoleOut.in&dataflow_type=push&interface_type=corba_cdr, SeqIn.octet?port=SeqOut.octet&dataflow_type=push&interface_type=direct
## if no parenthis parts are included, dataflow_type=push, interface_type=corba_cdr
##
# manager.components.preconnect:

##
## Advance component activation
##
## This option specifies components' names (module name) to be
## activated in advance before starting the manager's event-loop. The
## target components should be created previously by
## manager.components.precreate optinos.
##
## Example:
## manager.components.preactivation: ConsoleIn0, ConsoleOut0
##
# manager.components.preactivation:

##
## Loading local service modules
##
## Local service mechanisms are provided for services provided among
## components in the same process. Components can obtain and utilize
## local services from the manager. By using this mechanism components
## can share resources each other.
##
## Local service modules sometimes must be initialized before component
## module loading and initialization. Loadable modules which is
## specified in this option are previously loaded and initialized.
##
# manager.local_service.modules: IEEE1394CameraService.so

##
## Specifying enabled local services
##
## All the loaded local service modules are activated and enabled in
## default.  This option specify local serivces to be enabled when
## manager enables local services.
##
# manager.local_service.enabled_services: IEEE1394CameraService


##============================================================
## Logger configurations
##============================================================
##
## Enable/Disable logger [YES/NO]
# logger.enable: YES

##
## Log file name (default = ./rtc%p.log)
##
## %p: PID
##
# logger.file_name: ./rtc%p.log

##
## Log date format (default = %b %d %H:%M:%S)
##
## The following strftime(3) like format expression is available.
## If no prefix is needed, use "No" or "Disable".
##
## %a abbreviated weekday name
## %A full weekday name
## %b abbreviated month name
## %B full month name
## %c the standard date and time string
## %d day of the month, as a number (1-31)
## %H hour, 24 hour format (0-23)
## %I hour, 12 hour format (1-12)
## %j day of the year, as a number (1-366)
## %m month as a number (1-12).
##    Note: some versions of Microsoft Visual C++ may use values that range
##    from 0-11.
## %M minute as a number (0-59)
## %p locale's equivalent of AM or PM
## %Q millisecond as a number (0-999) from ver 1.1
## %q microsecond as a number (0-999) from ver 1.1
## %S second as a number (0-59)
## %U week of the year, sunday as the first day
## %w weekday as a decimal (0-6, sunday=0)
## %W week of the year, monday as the first day
## %x standard date string
## %X standard time string
## %y year in decimal, without the century (0-99)
## %Y year in decimal, with the century
## %Z time zone name
## %% a percent sign
##
##
## logger.date_format: No
## logger.date_format: Disable
## logger.date_format: [%Y-%m-%dT%H.%M.%S%Z]     // W3C standard format
## logger.date_format: [%b %d %H:%M:%S]          // Syslog format
## logger.date_format: [%a %b %d %Y %H:%M:%S %Z] // RFC2822 format
## logger.date_format: [%a %b %d %H:%M:%S %Z %Y] // data command format
## logger.date_format: [%Y-%m-%d %H.%M.%S]
##
# logger.date_format: %b %d %H:%M:%S

##
## Log level (default = INFO)
##
## The following LogLevels are allowed.
## SILENT, FATAL, ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE, PARANOID
##
##
## SILENT  : completely silent
## FATAL   : includes (FATAL)
## ERROR   : includes (FATAL, ERROR)
## WARN    : includes (FATAL, ERROR, WARN)
## INFO    : includes (FATAL, ERROR, WARN, INFO)
## DEBUG   : includes (FATAL, ERROR, WARN, INFO, DEBUG)
## TRACE   : includes (FATAL, ERROR, WARN, INFO, DEBUG, TRACE)
## VERBOSE : includes (FATAL, ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE)
## PARANOID: includes (FATAL, ERROR, WARN, INFO, DEBUG, TRACE, VERBOSE, PARA)
##
## Warning!!!
## "TRACE", "VERBOSE", "PARANOID" logging level will create a huge log file!!
## "PARANOID" log level will tangle the log file.
##
# logger.log_level: INFO

##
## Logger's clock time
##
## logger.clock_type option specifies a type of clock to be used for
## timestamp of log message. Now these three types are available.
##
## - system: system clock [default]
## - logical: logical clock
## - adjusted: adjusted clock
##
## To use logical time clock, call and set time by the following
## function in somewhere.
## coil::ClockManager::instance().getClock("logical").settime()
##
# logger.clock_type: system

##============================================================
## Timer configuration
##============================================================
##
## Enable/disable timer function
##
# timer.enable: YES

##
## Timer clock tick setting [s]
##
# timer.tick: 0.1

##============================================================
## Execution context settings
##============================================================
##
## Periodic type ExecutionContext
##
## Other availabilities in OpenRTM-aist
##
## - ExtTrigExecutionContext:   External triggered EC. It is embedded in
##                              OpenRTM library.
## - OpenHRPExecutionContext:   External triggred paralell execution
##                              EC. It is embedded in OpenRTM
##                              library. This is usually used with
##                              OpenHRP3.
## - SimulatorExecutionContext: External triggred paralell execution
##                              EC. It is embedded in OpenRTM
##                              library. This is usually used with
##                              Choreonoid.
## - RTPreemptEC:               Real-time execution context for Linux
##                              RT-preemptive pathed kernel.
## - ArtExecutionContext:       Real-time execution context for ARTLinux
##                              (http://sourceforge.net/projects/art-linux/)
##
## exec_cxt.periodic.type: PeriodicExecutionContext
# exec_cxt.event_driven_type: to be implemented

##
## The execution cycle of ExecutionContext
##
# exec_cxt.periodic.rate: 1000

##
## State transition mode settings YES/NO
##
## Default: YES (efault setting is recommended.)
##
## Activating, deactivating and resetting of RTC makes state
## transition.  Some execution contexts execute main logic in different
## thread.  If these flags set to YES, activation, deactivation and
## resetting will be performed synchronously.  In other words, if these
## flags are YES, activation/deactivation/resetting-operations must be
## returned after state transition completed.
##
## "synchronous_transition" will set synchronous transition flags to
## all other synchronous transition flags
## (synchronous_activation/deactivation/resetting.
##
# exec_cxt.sync_transition: YES
# exec_cxt.sync_activation: YES
# exec_cxt.sync_deactivation: YES
# exec_cxt.sync_reset: YES

##
## Timeout of synchronous state transition [s]
##
## Default: 1.0 [s]
##
## When synchronous transition flags are set to YES, the following
## timeout settings are valid. If "transition_timeout" is set, the
## value will be set to all other timeout of activation/deactivation
## and resetting
##
# exec_cxt.transition_timeout: 0.5
# exec_cxt.activation_timeout: 0.5
# exec_cxt.deactivation_timeout: 0.5
# exec_cxt.reset_timeout: 0.5



##============================================================
## SDO service settings
##============================================================
##
## SDO service provider settings
##
# sdo.service.provider.available_services: [read only]
# sdo.service.provider.enabled_services: ALL
# sdo.service.provider.providing_services: [read only]
##
## SDO service consumer settings
##
# sdo.service.consumer.available_services: [read only]
# sdo.service.consumer.enabled_services: ALL


##============================================================
## Fluent-bit logger plugin setting
##============================================================
##
## This is fluentbit logger plugin example in rtc.conf
##
# logger.enable: YES
# logger.log_level: PARANOID
# logger.file_name: rtc%p.log, stderr

## fluentbit specific configurations
# logger.plugins: FluentBit.so

## Output example (forward)
# logger.logstream.fluentd.output0.plugin: forward
# logger.logstream.fluentd.output0.tag: fluent_forward
# logger.logstream.fluentd.output0.match: *
#logger.logstream.fluentd.output0.host: 127.0.0.1 (default)
#logger.logstream.fluentd.output0.port: 24224 (default)

## Output example (stdout)
# logger.logstream.fluentd.output1.plugin: stdout
# logger.logstream.fluentd.output1.tag: fluent_stdout
# logger.logstream.fluentd.output1.match: *

# Input example (CPU)
# logger.logstream.fluentd.input0.plugin: cpu
# logger.logstream.fluentd.input0.tag: fluent_cpu


##============================================================
## DataPort setting
##============================================================

##------------------------------------------------------------
##
## Number of connectors that can be generated on the target data port
# port.inport.<InPortName>.fan_in: 100
# port.outport.<OutPortName>.fan_out: 100


##------------------------------------------------------------
##
## Enable a function of double connection prevention
# port.inport.<InPortName>.allow_dup_connection: YES
# port.outport.<OutPortName>.allow_dup_connection: YES
